// zizhi.min.js 子止工坊轻量御用组件 1.0.0
//以下为可被调用函数，待执行函数

// zz.request({
//     url: "",    //请求地址
//     data: {},   //请求数据
//     overtime: 5000,    //设置超时，默认为5000ms（5秒）
//     success: function (params) {
//         console.log("成功时执行");
//     },
//     fail: function (params) {
//         console.log("失败时执行");
//     },
//     complete: function (params) {
//         console.log("完成时执行")
//     }
// })

// 禁止调出控制台 start

//禁止右键
// window.oncontextmenu = function () {
//     event.preventDefault();
//     return false;
// }

// 禁止F12
// window.onkeydown = window.onkeyup = window.onkeypress = function () {
//     if (event.keyCode == 123) {
//         event.preventDefault();
//         window.event.returnValue = false;
//     }
// }
// 禁止调出控制台 end

var zz = {
	hiddenReminderBox: function () {
		document.getElementById("ReminderBox").remove();
	},

	hiddenWarningBox: function () {
		document.getElementById("WarningBox").remove();
	},

	DestructionEvent: function (DeleteSequenceNumber) {
		document.getElementById(DeleteSequenceNumber).remove();
	},

	RequestFunctionSequenceNumber: function () {
		var arr = [];
		var end = "";

		var Letter = ["a", "b", "c", "d", "e", "f"];
		for (let index = 0; index < 6; index++) {
			var RandomLetters = Math.floor(Math.random() * 6);
			arr.push(Letter[RandomLetters]);
		}
		for (var i = 0; i < arr.length; i++) {
			end = end + arr[i].toString();
		}

		return end;
	},

	FunctionExecution: function (functionName, data) {
		data = "'" + data + "'";
		if (data == "undefined") {
			data = "";
		}
		var script = document.createElement("script");
		script.innerHTML = functionName + "(" + data + ")";
		document.body.appendChild(script);
		script.remove();
	},

	RequesFc: function (data) {
		var RequestData = data;
		var overtime = 10000;
		var requestSetTime;
		if (RequestData.overtime) {
			overtime = RequestData.overtime;
		}
		var request_fc_nub = zz.RequestFunctionSequenceNumber();
		var return_fc_nub = zz.RequestFunctionSequenceNumber();
		var fail_fc_nub = zz.RequestFunctionSequenceNumber();
		var complete_fc_nub = zz.RequestFunctionSequenceNumber();
		if (RequestData.fail) {
			var fail_fc = document.createElement("script");
			fail_fc.id = fail_fc_nub;
			var l = new String(RequestData.fail);
			l = l.substring(l.indexOf("{") + 1, l.lastIndexOf("}"));
			var p = new String(RequestData.fail);
			p = p.substring(p.indexOf("(") + 1, p.indexOf(")"));
			fail_fc.innerHTML =
				"function " +
				fail_fc_nub +
				"(" +
				p +
				") { \n" +
				l +
				"\n zz.DestructionEvent('" +
				fail_fc_nub +
				"')\n}";
			document.body.appendChild(fail_fc);
		}
		if (RequestData.success) {
			var return_fc = document.createElement("script");
			return_fc.id = return_fc_nub;
			var l = new String(RequestData.success);
			l = l.substring(l.indexOf("{") + 1, l.lastIndexOf("}"));
			var p = new String(RequestData.success);
			p = p.substring(p.indexOf("(") + 1, p.indexOf(")"));
			return_fc.innerHTML =
				"function " +
				return_fc_nub +
				"(" +
				p +
				") { \n" +
				l +
				"\n zz.DestructionEvent('" +
				return_fc_nub +
				"')\n}";
			if (RequestData.fail) {
				zz.DestructionEvent(fail_fc_nub);
			}
			document.body.appendChild(return_fc);
		}
		var js = document.createElement("script");
		js.id = request_fc_nub;
		js.src = RequestData.url + "?code=" + return_fc_nub + "&" + RequestData.data;
		document.head.appendChild(js);
		if (RequestData.complete) {
			var complete_fc = document.createElement("script");
			complete_fc.id = complete_fc_nub;
			var l = new String(RequestData.complete);
			l = l.substring(l.indexOf("{") + 1, l.lastIndexOf("}"));
			var p = new String(RequestData.complete);
			p = p.substring(p.indexOf("(") + 1, p.indexOf(")"));
			complete_fc.innerHTML =
				"function " +
				complete_fc_nub +
				"(" +
				p +
				") { \n" +
				l +
				"\n zz.DestructionEvent('" +
				complete_fc_nub +
				"')\n}";
			document.body.appendChild(complete_fc);
			zz.FunctionExecution(complete_fc_nub);
		}
		zz.DestructionEvent(request_fc_nub);
		requestSetTime = setTimeout(() => {
			if (document.getElementById(return_fc_nub)) {
				zz.DestructionEvent(return_fc_nub);
				console.warn("Error:Request to " + RequestData.url + " failed");
				if (RequestData.fail) {
					zz.FunctionExecution(fail_fc_nub);
				}
				clearTimeout(requestSetTime);
			}
		}, overtime);
	},

	// 以上为函数预准备执行函数

	request: function (data) {
		// 网络请求调用函数
		var OBJ = data;
		var data = OBJ.data;
		var str = "";
		var allStrArr = [];
		var allObjArr = [];
		for (var i in data) {
			allObjArr.push(i);
			allObjArr.push(data[i]);
		}
		for (let index = 0; index < allObjArr.length; index += 2) {
			allStrArr.push(allObjArr[index] + "=" + allObjArr[index + 1]);
			if (index != allObjArr.length - 2) {
				allStrArr.push("&");
			}
		}
		for (let strNub = 0; strNub < allStrArr.length; strNub++) {
			str = str + allStrArr[strNub].toString();
		}
		OBJ.data = str;
		zz.RequesFc(OBJ);
	},
};
